type token =
  | LPAREN
  | RPAREN
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | PLUS
  | PLUS_DOT
  | MINUS
  | MINUS_DOT
  | TIMES
  | TIMES_DOT
  | DIVIDED
  | DIVIDED_DOT
  | DISJ
  | CONJ
  | EQUAL
  | IF
  | THEN
  | ELSE
  | NAME of (Type.n)
  | LET
  | IN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Syntax
# 31 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  262 (* PLUS *);
  263 (* PLUS_DOT *);
  264 (* MINUS *);
  265 (* MINUS_DOT *);
  266 (* TIMES *);
  267 (* TIMES_DOT *);
  268 (* DIVIDED *);
  269 (* DIVIDED_DOT *);
  270 (* DISJ *);
  271 (* CONJ *);
  272 (* EQUAL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  277 (* LET *);
  278 (* IN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  259 (* BOOL *);
  260 (* INT *);
  261 (* FLOAT *);
  276 (* NAME *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\006\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\002\000\003\000\004\000\000\000\005\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000"

let yysindex = "\255\255\
\037\255\000\000\037\255\000\000\000\000\000\000\037\255\000\000\
\241\254\144\255\000\000\080\255\131\255\246\254\037\255\037\255\
\037\255\037\255\037\255\037\255\037\255\037\255\037\255\037\255\
\037\255\000\000\037\255\037\255\000\255\244\254\000\255\244\254\
\000\255\244\254\000\255\244\254\144\255\144\255\144\255\095\255\
\053\255\037\255\037\255\144\255\144\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\001\000\085\000\019\000\
\100\000\037\000\115\000\055\000\113\000\122\000\124\000\000\000\
\000\000\000\000\000\000\134\000\136\000"

let yygindex = "\000\000\
\005\000\000\000"

let yytablesize = 414
let yytable = "\001\000\
\008\000\023\000\024\000\025\000\014\000\028\000\016\000\012\000\
\018\000\020\000\020\000\013\000\022\000\023\000\024\000\025\000\
\000\000\000\000\010\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\000\000\040\000\
\041\000\000\000\000\000\000\000\012\000\003\000\000\000\004\000\
\005\000\006\000\000\000\000\000\000\000\000\000\044\000\045\000\
\000\000\000\000\000\000\000\000\000\000\007\000\014\000\000\000\
\008\000\009\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\007\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\009\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\000\000\000\000\000\000\011\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\000\000\
\015\000\042\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\019\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\000\000\027\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\000\000\000\000\
\000\000\000\000\008\000\008\000\010\000\000\000\008\000\000\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\000\000\000\000\000\000\000\000\010\000\010\000\012\000\000\000\
\010\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\000\000\000\000\000\000\012\000\012\000\
\014\000\000\000\012\000\000\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\000\000\007\000\
\014\000\014\000\000\000\007\000\014\000\007\000\000\000\007\000\
\000\000\007\000\000\000\000\000\000\000\000\000\009\000\007\000\
\007\000\000\000\009\000\007\000\009\000\000\000\009\000\000\000\
\009\000\000\000\000\000\000\000\000\000\011\000\009\000\009\000\
\000\000\011\000\009\000\011\000\000\000\011\000\000\000\011\000\
\000\000\000\000\015\000\000\000\013\000\011\000\011\000\000\000\
\013\000\011\000\013\000\016\000\013\000\017\000\013\000\000\000\
\000\000\000\000\015\000\015\000\013\000\013\000\015\000\018\000\
\013\000\019\000\000\000\016\000\016\000\017\000\017\000\016\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\019\000\019\000\018\000\000\000\019\000"

let yycheck = "\001\000\
\000\000\014\001\015\001\016\001\020\001\016\001\007\001\003\000\
\009\001\000\000\011\001\007\000\013\001\014\001\015\001\016\001\
\255\255\255\255\000\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\255\255\027\000\
\028\000\255\255\255\255\255\255\000\000\001\001\255\255\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\042\000\043\000\
\255\255\255\255\255\255\255\255\255\255\017\001\000\000\255\255\
\020\001\021\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\000\000\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\000\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\000\000\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\000\000\019\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\255\255\018\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\002\001\255\255\022\001\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\002\001\255\255\
\022\001\255\255\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\002\001\255\255\022\001\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\255\255\255\255\002\001\
\018\001\019\001\255\255\006\001\022\001\008\001\255\255\010\001\
\255\255\012\001\255\255\255\255\255\255\255\255\002\001\018\001\
\019\001\255\255\006\001\022\001\008\001\255\255\010\001\255\255\
\012\001\255\255\255\255\255\255\255\255\002\001\018\001\019\001\
\255\255\006\001\022\001\008\001\255\255\010\001\255\255\012\001\
\255\255\255\255\002\001\255\255\002\001\018\001\019\001\255\255\
\006\001\022\001\008\001\002\001\010\001\002\001\012\001\255\255\
\255\255\255\255\018\001\019\001\018\001\019\001\022\001\002\001\
\022\001\002\001\255\255\018\001\019\001\018\001\019\001\022\001\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\018\001\019\001\022\001\255\255\022\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  PLUS\000\
  PLUS_DOT\000\
  MINUS\000\
  MINUS_DOT\000\
  TIMES\000\
  TIMES_DOT\000\
  DIVIDED\000\
  DIVIDED_DOT\000\
  DISJ\000\
  CONJ\000\
  EQUAL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  NAME\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 39 "parser.mly"
    ( _2 )
# 246 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 42 "parser.mly"
    ( Bool(_1) )
# 253 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 44 "parser.mly"
    ( Int(_1) )
# 260 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 46 "parser.mly"
    ( Float(_1) )
# 267 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Type.n) in
    Obj.repr(
# 48 "parser.mly"
    ( Var(_1) )
# 274 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 52 "parser.mly"
      ( _1 )
# 281 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 55 "parser.mly"
      ( Add (_1, _3) )
# 289 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 57 "parser.mly"
      ( Add_dot (_1, _3) )
# 297 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 60 "parser.mly"
      ( Minus (_1, _3) )
# 305 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 62 "parser.mly"
      ( Minus_dot (_1, _3) )
# 313 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 65 "parser.mly"
      ( Times (_1, _3) )
# 321 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 67 "parser.mly"
      ( Times_dot (_1, _3) )
# 329 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
      ( Divided (_1, _3) )
# 337 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 72 "parser.mly"
      ( Divided_dot (_1, _3) )
# 345 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 75 "parser.mly"
      ( Disj(_1, _3) )
# 353 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 77 "parser.mly"
      ( Conj(_1, _3) )
# 361 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
      ( Equal(_1, _3) )
# 369 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
      ( If(_2, _4, _6) )
# 378 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Type.n) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 85 "parser.mly"
      ( Fun( _2 ,_4, _6) )
# 387 "parser.ml"
               : Syntax.t))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
